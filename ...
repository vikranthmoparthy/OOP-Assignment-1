import numpy as np
from copy import deepcopy

class MultipleLinearRegression:
    """
    Implements multiple linear regression using ordinary least squares.
    """

    def __init__(self) -> None:
        """
        Initializes the regression model. Parameters are set after calling fit().
        """
        self._parameters: dict[str, np.ndarray] = {}

    @property
    def parameters(self) -> dict[str, np.ndarray]:
        """
        Returns a deep copy of the learned parameters to prevent external modification.
        """
        return deepcopy(self._parameters)

    def fit(self, X: np.ndarray, y: np.ndarray) -> None:
        """
        Trains the regression model using the OLS solution.

        Args:
            X: np.ndarray of shape (n_samples, n_features)
            y: np.ndarray of shape (n_samples,) or (n_samples, 1)
        """
        n_samples = X.shape
        X_aug = np.hstack([X, np.ones((n_samples, 1))])
        w_opt = np.linalg.pinv(X_aug.T @ X_aug) @ (X_aug.T @ y)
        self._parameters['parameters'] = w_opt

    def predict(self, X: np.ndarray) -> np.ndarray:
        """
        Predicts target values using the learned parameters.

        Args:
            X: np.ndarray of shape (n_samples, n_features)

        Returns:
            np.ndarray: Predicted values y_hat
        """
        if not self._parameters:
            raise ValueError
        n_samples = X.shape
        X_aug = np.hstack([X, np.ones((n_samples, 1))])
        w_opt = self._parameters['parameters']
        return X_aug @ w_opt
