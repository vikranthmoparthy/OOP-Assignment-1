import numpy as np
from typing import Dict

class MultipleLinearRegression:
    """
    Implements Multiple Linear Regression using Ordinary Least Squares.
    """

    def __init__(self) -> None:
        """
        Initializes the regressor. Does not set parameters or accept data.
        """
        self._parameters: Dict[str, np.ndarray] = {}

    @property
    def parameters(self) -> Dict[str, np.ndarray]:
        """
        Read-only view of the learned parameter vector.
        """
        return dict(self._parameters)

    def fit(self, X: np.ndarray, y: np.ndarray) -> None:
        """
        Fits the regression model using closed-form OLS solution.

        Args:
            X: np.ndarray of shape (n_samples, n_features)
            y: np.ndarray of shape (n_samples,) or (n_samples, 1)
        """
        n_samples = X.shape
        X_aug = np.hstack([X, np.ones((n_samples, 1))])
        # Closed-form: (X^T X)^{-1} X^T y
        w_opt = np.linalg.pinv(X_aug.T @ X_aug) @ (X_aug.T @ y)
        self._parameters['parameters'] = w_opt

    def predict(self, X: np.ndarray) -> np.ndarray:
        """
        Predicts target values using the learned parameters.

        Args:
            X: np.ndarray of shape (n_samples, n_features)

        Returns:
            np.ndarray: Predicted values y_hat
        """
        if not self._parameters:
            raise ValueError("Call fit() before predict().")
        n_samples = X.shape
        X_aug = np.hstack([X, np.ones((n_samples, 1))])
        w_opt = self._parameters['parameters']
        return X_aug @ w_opt
